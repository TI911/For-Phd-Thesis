# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from snake_msgs/SnakeCOPData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class SnakeCOPData(genpy.Message):
  _md5sum = "0d1283387ab042ecc653c389b04b7914"
  _type = "snake_msgs/SnakeCOPData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """###############################################################################
# 鈴木先生のCenter of Presserセンサのやりとりにつかうメッセージ
# joint_indexは、センサーのついているジョイント番号
# １つのセンサで半周のものが２つあるので、cop_indexは0,1の２つ
# 半周の中に8ch分の12bitデータがあるらしいので、uint16のデータを８個ならべる
###############################################################################

time timestamp 
uint8 joint_index
uint8 cop_index
bool data_is_updated
uint16[] value

#uint16 value1
#uint16 value2
#uint16 value3
#uint16 value4
#uint16 value5
#uint16 value6
#uint16 value7
#uint16 value8

"""
  __slots__ = ['timestamp','joint_index','cop_index','data_is_updated','value']
  _slot_types = ['time','uint8','uint8','bool','uint16[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,joint_index,cop_index,data_is_updated,value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SnakeCOPData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.joint_index is None:
        self.joint_index = 0
      if self.cop_index is None:
        self.cop_index = 0
      if self.data_is_updated is None:
        self.data_is_updated = False
      if self.value is None:
        self.value = []
    else:
      self.timestamp = genpy.Time()
      self.joint_index = 0
      self.cop_index = 0
      self.data_is_updated = False
      self.value = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I3B.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.joint_index, _x.cop_index, _x.data_is_updated))
      length = len(self.value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 11
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.joint_index, _x.cop_index, _x.data_is_updated,) = _struct_2I3B.unpack(str[start:end])
      self.data_is_updated = bool(self.data_is_updated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.value = struct.unpack(pattern, str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I3B.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.joint_index, _x.cop_index, _x.data_is_updated))
      length = len(self.value)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.value.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 11
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.joint_index, _x.cop_index, _x.data_is_updated,) = _struct_2I3B.unpack(str[start:end])
      self.data_is_updated = bool(self.data_is_updated)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.value = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I3B = struct.Struct("<2I3B")
