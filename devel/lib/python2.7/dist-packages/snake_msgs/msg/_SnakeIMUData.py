# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from snake_msgs/SnakeIMUData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class SnakeIMUData(genpy.Message):
  _md5sum = "6f2692c3e545b57f46e8652baf8e5fda"
  _type = "snake_msgs/SnakeIMUData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """###########################################################
# 読み込んだIMUのデータを成形するためのmsg型
# どのタイプのデータについてもこのmsg型を用いる
# 中身を更新したデータに関する *_is_updatedをtrueに変更する
###########################################################

time timestamp 
uint8 imu_index

# roll-pitch-yaw形式 [deg]
float64 roll
float64 pitch
float64 yaw
bool rpy_is_updated

# gyroセンサのデータ [deg/sec]
float64 gyro_x
float64 gyro_y
float64 gyro_z
bool gyro_is_updated

# 加速度センサデータ [m/s2]
float64 accel_x
float64 accel_y
float64 accel_z
bool accel_is_updated
"""
  __slots__ = ['timestamp','imu_index','roll','pitch','yaw','rpy_is_updated','gyro_x','gyro_y','gyro_z','gyro_is_updated','accel_x','accel_y','accel_z','accel_is_updated']
  _slot_types = ['time','uint8','float64','float64','float64','bool','float64','float64','float64','bool','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,imu_index,roll,pitch,yaw,rpy_is_updated,gyro_x,gyro_y,gyro_z,gyro_is_updated,accel_x,accel_y,accel_z,accel_is_updated

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SnakeIMUData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.imu_index is None:
        self.imu_index = 0
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.rpy_is_updated is None:
        self.rpy_is_updated = False
      if self.gyro_x is None:
        self.gyro_x = 0.
      if self.gyro_y is None:
        self.gyro_y = 0.
      if self.gyro_z is None:
        self.gyro_z = 0.
      if self.gyro_is_updated is None:
        self.gyro_is_updated = False
      if self.accel_x is None:
        self.accel_x = 0.
      if self.accel_y is None:
        self.accel_y = 0.
      if self.accel_z is None:
        self.accel_z = 0.
      if self.accel_is_updated is None:
        self.accel_is_updated = False
    else:
      self.timestamp = genpy.Time()
      self.imu_index = 0
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.rpy_is_updated = False
      self.gyro_x = 0.
      self.gyro_y = 0.
      self.gyro_z = 0.
      self.gyro_is_updated = False
      self.accel_x = 0.
      self.accel_y = 0.
      self.accel_z = 0.
      self.accel_is_updated = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2IB3dB3dB3dB.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.imu_index, _x.roll, _x.pitch, _x.yaw, _x.rpy_is_updated, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.gyro_is_updated, _x.accel_x, _x.accel_y, _x.accel_z, _x.accel_is_updated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.imu_index, _x.roll, _x.pitch, _x.yaw, _x.rpy_is_updated, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.gyro_is_updated, _x.accel_x, _x.accel_y, _x.accel_z, _x.accel_is_updated,) = _struct_2IB3dB3dB3dB.unpack(str[start:end])
      self.rpy_is_updated = bool(self.rpy_is_updated)
      self.gyro_is_updated = bool(self.gyro_is_updated)
      self.accel_is_updated = bool(self.accel_is_updated)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2IB3dB3dB3dB.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.imu_index, _x.roll, _x.pitch, _x.yaw, _x.rpy_is_updated, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.gyro_is_updated, _x.accel_x, _x.accel_y, _x.accel_z, _x.accel_is_updated))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.imu_index, _x.roll, _x.pitch, _x.yaw, _x.rpy_is_updated, _x.gyro_x, _x.gyro_y, _x.gyro_z, _x.gyro_is_updated, _x.accel_x, _x.accel_y, _x.accel_z, _x.accel_is_updated,) = _struct_2IB3dB3dB3dB.unpack(str[start:end])
      self.rpy_is_updated = bool(self.rpy_is_updated)
      self.gyro_is_updated = bool(self.gyro_is_updated)
      self.accel_is_updated = bool(self.accel_is_updated)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2IB3dB3dB3dB = struct.Struct("<2IB3dB3dB3dB")
