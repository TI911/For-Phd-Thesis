# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from snake_msgs/SnakeSlaveMCUError.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class SnakeSlaveMCUError(genpy.Message):
  _md5sum = "ec4a0033a8ccadf04d99caa8e4a4ea13"
  _type = "snake_msgs/SnakeSlaveMCUError"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """###########################################################
# MCUのエラーの内容に関するmsg型
# エラーが起きているところがtrue
###########################################################

time timestamp
uint8 mcu_id
bool reseted_by_power_on
bool reseted_by_software
bool reseted_by_low_power
bool reseted_by_watch_dog_timer
bool voltage
"""
  __slots__ = ['timestamp','mcu_id','reseted_by_power_on','reseted_by_software','reseted_by_low_power','reseted_by_watch_dog_timer','voltage']
  _slot_types = ['time','uint8','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,mcu_id,reseted_by_power_on,reseted_by_software,reseted_by_low_power,reseted_by_watch_dog_timer,voltage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SnakeSlaveMCUError, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.mcu_id is None:
        self.mcu_id = 0
      if self.reseted_by_power_on is None:
        self.reseted_by_power_on = False
      if self.reseted_by_software is None:
        self.reseted_by_software = False
      if self.reseted_by_low_power is None:
        self.reseted_by_low_power = False
      if self.reseted_by_watch_dog_timer is None:
        self.reseted_by_watch_dog_timer = False
      if self.voltage is None:
        self.voltage = False
    else:
      self.timestamp = genpy.Time()
      self.mcu_id = 0
      self.reseted_by_power_on = False
      self.reseted_by_software = False
      self.reseted_by_low_power = False
      self.reseted_by_watch_dog_timer = False
      self.voltage = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I6B.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.mcu_id, _x.reseted_by_power_on, _x.reseted_by_software, _x.reseted_by_low_power, _x.reseted_by_watch_dog_timer, _x.voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.mcu_id, _x.reseted_by_power_on, _x.reseted_by_software, _x.reseted_by_low_power, _x.reseted_by_watch_dog_timer, _x.voltage,) = _struct_2I6B.unpack(str[start:end])
      self.reseted_by_power_on = bool(self.reseted_by_power_on)
      self.reseted_by_software = bool(self.reseted_by_software)
      self.reseted_by_low_power = bool(self.reseted_by_low_power)
      self.reseted_by_watch_dog_timer = bool(self.reseted_by_watch_dog_timer)
      self.voltage = bool(self.voltage)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I6B.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.mcu_id, _x.reseted_by_power_on, _x.reseted_by_software, _x.reseted_by_low_power, _x.reseted_by_watch_dog_timer, _x.voltage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.mcu_id, _x.reseted_by_power_on, _x.reseted_by_software, _x.reseted_by_low_power, _x.reseted_by_watch_dog_timer, _x.voltage,) = _struct_2I6B.unpack(str[start:end])
      self.reseted_by_power_on = bool(self.reseted_by_power_on)
      self.reseted_by_software = bool(self.reseted_by_software)
      self.reseted_by_low_power = bool(self.reseted_by_low_power)
      self.reseted_by_watch_dog_timer = bool(self.reseted_by_watch_dog_timer)
      self.voltage = bool(self.voltage)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I6B = struct.Struct("<2I6B")
