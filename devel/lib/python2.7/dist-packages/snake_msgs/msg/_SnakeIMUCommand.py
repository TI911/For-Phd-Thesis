# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from snake_msgs/SnakeIMUCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SnakeIMUCommand(genpy.Message):
  _md5sum = "15cc8c33a9577e0f807fde7df107ac7e"
  _type = "snake_msgs/SnakeIMUCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """###########################################################
# ロボットにIMU関係のデータを要求するためのmsg型
# 必要なデータの形式に関するread_*trueにする
###########################################################

uint8 imu_index
bool read_roll_pitch_yaw
bool read_gyro
bool read_accel
"""
  __slots__ = ['imu_index','read_roll_pitch_yaw','read_gyro','read_accel']
  _slot_types = ['uint8','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       imu_index,read_roll_pitch_yaw,read_gyro,read_accel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SnakeIMUCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.imu_index is None:
        self.imu_index = 0
      if self.read_roll_pitch_yaw is None:
        self.read_roll_pitch_yaw = False
      if self.read_gyro is None:
        self.read_gyro = False
      if self.read_accel is None:
        self.read_accel = False
    else:
      self.imu_index = 0
      self.read_roll_pitch_yaw = False
      self.read_gyro = False
      self.read_accel = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.imu_index, _x.read_roll_pitch_yaw, _x.read_gyro, _x.read_accel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.imu_index, _x.read_roll_pitch_yaw, _x.read_gyro, _x.read_accel,) = _struct_4B.unpack(str[start:end])
      self.read_roll_pitch_yaw = bool(self.read_roll_pitch_yaw)
      self.read_gyro = bool(self.read_gyro)
      self.read_accel = bool(self.read_accel)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.imu_index, _x.read_roll_pitch_yaw, _x.read_gyro, _x.read_accel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.imu_index, _x.read_roll_pitch_yaw, _x.read_gyro, _x.read_accel,) = _struct_4B.unpack(str[start:end])
      self.read_roll_pitch_yaw = bool(self.read_roll_pitch_yaw)
      self.read_gyro = bool(self.read_gyro)
      self.read_accel = bool(self.read_accel)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4B = struct.Struct("<4B")
