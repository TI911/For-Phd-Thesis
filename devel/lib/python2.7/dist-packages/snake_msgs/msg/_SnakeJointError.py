# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from snake_msgs/SnakeJointError.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class SnakeJointError(genpy.Message):
  _md5sum = "01959fb127e032fa0cdcc3809ae3e57d"
  _type = "snake_msgs/SnakeJointError"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """###########################################################
# 関節のエラーに関する情報を投げるためのmsg型
# エラーが起きているとtrue
###########################################################

time timestamp
uint8 joint_index         # index number of joint
bool cannot_receive_data  # MCU could not receive data from sarvo.
bool input_voltage        # Input voltage of sarvo is too low or too high.  Motor is forced to stop.
bool mcu_temperature      # Temperature of MCU of sarvo is too high. Motor is forced to stop.
bool motor_temperature    # Temperature of motor is too high. Motor is forced to stop.
bool overload             # Current of motor is too high.

"""
  __slots__ = ['timestamp','joint_index','cannot_receive_data','input_voltage','mcu_temperature','motor_temperature','overload']
  _slot_types = ['time','uint8','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,joint_index,cannot_receive_data,input_voltage,mcu_temperature,motor_temperature,overload

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SnakeJointError, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.joint_index is None:
        self.joint_index = 0
      if self.cannot_receive_data is None:
        self.cannot_receive_data = False
      if self.input_voltage is None:
        self.input_voltage = False
      if self.mcu_temperature is None:
        self.mcu_temperature = False
      if self.motor_temperature is None:
        self.motor_temperature = False
      if self.overload is None:
        self.overload = False
    else:
      self.timestamp = genpy.Time()
      self.joint_index = 0
      self.cannot_receive_data = False
      self.input_voltage = False
      self.mcu_temperature = False
      self.motor_temperature = False
      self.overload = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I6B.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.joint_index, _x.cannot_receive_data, _x.input_voltage, _x.mcu_temperature, _x.motor_temperature, _x.overload))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.joint_index, _x.cannot_receive_data, _x.input_voltage, _x.mcu_temperature, _x.motor_temperature, _x.overload,) = _struct_2I6B.unpack(str[start:end])
      self.cannot_receive_data = bool(self.cannot_receive_data)
      self.input_voltage = bool(self.input_voltage)
      self.mcu_temperature = bool(self.mcu_temperature)
      self.motor_temperature = bool(self.motor_temperature)
      self.overload = bool(self.overload)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I6B.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.joint_index, _x.cannot_receive_data, _x.input_voltage, _x.mcu_temperature, _x.motor_temperature, _x.overload))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.joint_index, _x.cannot_receive_data, _x.input_voltage, _x.mcu_temperature, _x.motor_temperature, _x.overload,) = _struct_2I6B.unpack(str[start:end])
      self.cannot_receive_data = bool(self.cannot_receive_data)
      self.input_voltage = bool(self.input_voltage)
      self.mcu_temperature = bool(self.mcu_temperature)
      self.motor_temperature = bool(self.motor_temperature)
      self.overload = bool(self.overload)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I6B = struct.Struct("<2I6B")
