# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from joy_handler_hori/JoySelectedData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class JoySelectedData(genpy.Message):
  _md5sum = "7d56ee422bee82a4e3ea6346a318a1b6"
  _type = "joy_handler_hori/JoySelectedData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """###########################################################
# JoyStickのデータの簡略化版
# maker : HORIPAD 3 TURBO
#
# - buttonは全てbool型であり，押されていたらture
###########################################################

float32 joy_stick_r_x_rightwards  # 右ジョイスティック左右方向 右が正
float32 joy_stick_r_y_upwards     # 右ジョイスティック上下方向 上が正

float32 joy_stick_l_x_rightwards  # 左ジョイスティック左右方向 右が正
float32 joy_stick_l_y_upwards     # 左ジョイスティック上下方向 上が正

bool cross_key_right
bool cross_key_left
bool cross_key_up
bool cross_key_down

bool button_circle
bool button_triangle
bool button_cross
bool button_square

bool button_r1
bool button_r2
bool button_r3

bool button_l1
bool button_l2
bool button_l3

bool button_select
bool button_start
bool button_ps
"""
  __slots__ = ['joy_stick_r_x_rightwards','joy_stick_r_y_upwards','joy_stick_l_x_rightwards','joy_stick_l_y_upwards','cross_key_right','cross_key_left','cross_key_up','cross_key_down','button_circle','button_triangle','button_cross','button_square','button_r1','button_r2','button_r3','button_l1','button_l2','button_l3','button_select','button_start','button_ps']
  _slot_types = ['float32','float32','float32','float32','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       joy_stick_r_x_rightwards,joy_stick_r_y_upwards,joy_stick_l_x_rightwards,joy_stick_l_y_upwards,cross_key_right,cross_key_left,cross_key_up,cross_key_down,button_circle,button_triangle,button_cross,button_square,button_r1,button_r2,button_r3,button_l1,button_l2,button_l3,button_select,button_start,button_ps

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JoySelectedData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.joy_stick_r_x_rightwards is None:
        self.joy_stick_r_x_rightwards = 0.
      if self.joy_stick_r_y_upwards is None:
        self.joy_stick_r_y_upwards = 0.
      if self.joy_stick_l_x_rightwards is None:
        self.joy_stick_l_x_rightwards = 0.
      if self.joy_stick_l_y_upwards is None:
        self.joy_stick_l_y_upwards = 0.
      if self.cross_key_right is None:
        self.cross_key_right = False
      if self.cross_key_left is None:
        self.cross_key_left = False
      if self.cross_key_up is None:
        self.cross_key_up = False
      if self.cross_key_down is None:
        self.cross_key_down = False
      if self.button_circle is None:
        self.button_circle = False
      if self.button_triangle is None:
        self.button_triangle = False
      if self.button_cross is None:
        self.button_cross = False
      if self.button_square is None:
        self.button_square = False
      if self.button_r1 is None:
        self.button_r1 = False
      if self.button_r2 is None:
        self.button_r2 = False
      if self.button_r3 is None:
        self.button_r3 = False
      if self.button_l1 is None:
        self.button_l1 = False
      if self.button_l2 is None:
        self.button_l2 = False
      if self.button_l3 is None:
        self.button_l3 = False
      if self.button_select is None:
        self.button_select = False
      if self.button_start is None:
        self.button_start = False
      if self.button_ps is None:
        self.button_ps = False
    else:
      self.joy_stick_r_x_rightwards = 0.
      self.joy_stick_r_y_upwards = 0.
      self.joy_stick_l_x_rightwards = 0.
      self.joy_stick_l_y_upwards = 0.
      self.cross_key_right = False
      self.cross_key_left = False
      self.cross_key_up = False
      self.cross_key_down = False
      self.button_circle = False
      self.button_triangle = False
      self.button_cross = False
      self.button_square = False
      self.button_r1 = False
      self.button_r2 = False
      self.button_r3 = False
      self.button_l1 = False
      self.button_l2 = False
      self.button_l3 = False
      self.button_select = False
      self.button_start = False
      self.button_ps = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4f17B.pack(_x.joy_stick_r_x_rightwards, _x.joy_stick_r_y_upwards, _x.joy_stick_l_x_rightwards, _x.joy_stick_l_y_upwards, _x.cross_key_right, _x.cross_key_left, _x.cross_key_up, _x.cross_key_down, _x.button_circle, _x.button_triangle, _x.button_cross, _x.button_square, _x.button_r1, _x.button_r2, _x.button_r3, _x.button_l1, _x.button_l2, _x.button_l3, _x.button_select, _x.button_start, _x.button_ps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.joy_stick_r_x_rightwards, _x.joy_stick_r_y_upwards, _x.joy_stick_l_x_rightwards, _x.joy_stick_l_y_upwards, _x.cross_key_right, _x.cross_key_left, _x.cross_key_up, _x.cross_key_down, _x.button_circle, _x.button_triangle, _x.button_cross, _x.button_square, _x.button_r1, _x.button_r2, _x.button_r3, _x.button_l1, _x.button_l2, _x.button_l3, _x.button_select, _x.button_start, _x.button_ps,) = _struct_4f17B.unpack(str[start:end])
      self.cross_key_right = bool(self.cross_key_right)
      self.cross_key_left = bool(self.cross_key_left)
      self.cross_key_up = bool(self.cross_key_up)
      self.cross_key_down = bool(self.cross_key_down)
      self.button_circle = bool(self.button_circle)
      self.button_triangle = bool(self.button_triangle)
      self.button_cross = bool(self.button_cross)
      self.button_square = bool(self.button_square)
      self.button_r1 = bool(self.button_r1)
      self.button_r2 = bool(self.button_r2)
      self.button_r3 = bool(self.button_r3)
      self.button_l1 = bool(self.button_l1)
      self.button_l2 = bool(self.button_l2)
      self.button_l3 = bool(self.button_l3)
      self.button_select = bool(self.button_select)
      self.button_start = bool(self.button_start)
      self.button_ps = bool(self.button_ps)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4f17B.pack(_x.joy_stick_r_x_rightwards, _x.joy_stick_r_y_upwards, _x.joy_stick_l_x_rightwards, _x.joy_stick_l_y_upwards, _x.cross_key_right, _x.cross_key_left, _x.cross_key_up, _x.cross_key_down, _x.button_circle, _x.button_triangle, _x.button_cross, _x.button_square, _x.button_r1, _x.button_r2, _x.button_r3, _x.button_l1, _x.button_l2, _x.button_l3, _x.button_select, _x.button_start, _x.button_ps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.joy_stick_r_x_rightwards, _x.joy_stick_r_y_upwards, _x.joy_stick_l_x_rightwards, _x.joy_stick_l_y_upwards, _x.cross_key_right, _x.cross_key_left, _x.cross_key_up, _x.cross_key_down, _x.button_circle, _x.button_triangle, _x.button_cross, _x.button_square, _x.button_r1, _x.button_r2, _x.button_r3, _x.button_l1, _x.button_l2, _x.button_l3, _x.button_select, _x.button_start, _x.button_ps,) = _struct_4f17B.unpack(str[start:end])
      self.cross_key_right = bool(self.cross_key_right)
      self.cross_key_left = bool(self.cross_key_left)
      self.cross_key_up = bool(self.cross_key_up)
      self.cross_key_down = bool(self.cross_key_down)
      self.button_circle = bool(self.button_circle)
      self.button_triangle = bool(self.button_triangle)
      self.button_cross = bool(self.button_cross)
      self.button_square = bool(self.button_square)
      self.button_r1 = bool(self.button_r1)
      self.button_r2 = bool(self.button_r2)
      self.button_r3 = bool(self.button_r3)
      self.button_l1 = bool(self.button_l1)
      self.button_l2 = bool(self.button_l2)
      self.button_l3 = bool(self.button_l3)
      self.button_select = bool(self.button_select)
      self.button_start = bool(self.button_start)
      self.button_ps = bool(self.button_ps)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f17B = struct.Struct("<4f17B")
