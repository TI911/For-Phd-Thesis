// Generated by gencpp from file joy_handler_hori/JoySelectedData.msg
// DO NOT EDIT!


#ifndef JOY_HANDLER_HORI_MESSAGE_JOYSELECTEDDATA_H
#define JOY_HANDLER_HORI_MESSAGE_JOYSELECTEDDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace joy_handler_hori
{
template <class ContainerAllocator>
struct JoySelectedData_
{
  typedef JoySelectedData_<ContainerAllocator> Type;

  JoySelectedData_()
    : joy_stick_r_x_rightwards(0.0)
    , joy_stick_r_y_upwards(0.0)
    , joy_stick_l_x_rightwards(0.0)
    , joy_stick_l_y_upwards(0.0)
    , cross_key_right(false)
    , cross_key_left(false)
    , cross_key_up(false)
    , cross_key_down(false)
    , button_circle(false)
    , button_triangle(false)
    , button_cross(false)
    , button_square(false)
    , button_r1(false)
    , button_r2(false)
    , button_r3(false)
    , button_l1(false)
    , button_l2(false)
    , button_l3(false)
    , button_select(false)
    , button_start(false)
    , button_ps(false)  {
    }
  JoySelectedData_(const ContainerAllocator& _alloc)
    : joy_stick_r_x_rightwards(0.0)
    , joy_stick_r_y_upwards(0.0)
    , joy_stick_l_x_rightwards(0.0)
    , joy_stick_l_y_upwards(0.0)
    , cross_key_right(false)
    , cross_key_left(false)
    , cross_key_up(false)
    , cross_key_down(false)
    , button_circle(false)
    , button_triangle(false)
    , button_cross(false)
    , button_square(false)
    , button_r1(false)
    , button_r2(false)
    , button_r3(false)
    , button_l1(false)
    , button_l2(false)
    , button_l3(false)
    , button_select(false)
    , button_start(false)
    , button_ps(false)  {
  (void)_alloc;
    }



   typedef float _joy_stick_r_x_rightwards_type;
  _joy_stick_r_x_rightwards_type joy_stick_r_x_rightwards;

   typedef float _joy_stick_r_y_upwards_type;
  _joy_stick_r_y_upwards_type joy_stick_r_y_upwards;

   typedef float _joy_stick_l_x_rightwards_type;
  _joy_stick_l_x_rightwards_type joy_stick_l_x_rightwards;

   typedef float _joy_stick_l_y_upwards_type;
  _joy_stick_l_y_upwards_type joy_stick_l_y_upwards;

   typedef uint8_t _cross_key_right_type;
  _cross_key_right_type cross_key_right;

   typedef uint8_t _cross_key_left_type;
  _cross_key_left_type cross_key_left;

   typedef uint8_t _cross_key_up_type;
  _cross_key_up_type cross_key_up;

   typedef uint8_t _cross_key_down_type;
  _cross_key_down_type cross_key_down;

   typedef uint8_t _button_circle_type;
  _button_circle_type button_circle;

   typedef uint8_t _button_triangle_type;
  _button_triangle_type button_triangle;

   typedef uint8_t _button_cross_type;
  _button_cross_type button_cross;

   typedef uint8_t _button_square_type;
  _button_square_type button_square;

   typedef uint8_t _button_r1_type;
  _button_r1_type button_r1;

   typedef uint8_t _button_r2_type;
  _button_r2_type button_r2;

   typedef uint8_t _button_r3_type;
  _button_r3_type button_r3;

   typedef uint8_t _button_l1_type;
  _button_l1_type button_l1;

   typedef uint8_t _button_l2_type;
  _button_l2_type button_l2;

   typedef uint8_t _button_l3_type;
  _button_l3_type button_l3;

   typedef uint8_t _button_select_type;
  _button_select_type button_select;

   typedef uint8_t _button_start_type;
  _button_start_type button_start;

   typedef uint8_t _button_ps_type;
  _button_ps_type button_ps;




  typedef boost::shared_ptr< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> const> ConstPtr;

}; // struct JoySelectedData_

typedef ::joy_handler_hori::JoySelectedData_<std::allocator<void> > JoySelectedData;

typedef boost::shared_ptr< ::joy_handler_hori::JoySelectedData > JoySelectedDataPtr;
typedef boost::shared_ptr< ::joy_handler_hori::JoySelectedData const> JoySelectedDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joy_handler_hori::JoySelectedData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace joy_handler_hori

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'joy_handler_hori': ['/home/matsuda/catkin_ws/src/joy_handler_hori/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d56ee422bee82a4e3ea6346a318a1b6";
  }

  static const char* value(const ::joy_handler_hori::JoySelectedData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d56ee422bee82a4ULL;
  static const uint64_t static_value2 = 0xe3ea6346a318a1b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joy_handler_hori/JoySelectedData";
  }

  static const char* value(const ::joy_handler_hori::JoySelectedData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "###########################################################\n\
# JoyStickのデータの簡略化版\n\
# maker : HORIPAD 3 TURBO\n\
#\n\
# - buttonは全てbool型であり，押されていたらture\n\
###########################################################\n\
\n\
float32 joy_stick_r_x_rightwards  # 右ジョイスティック左右方向 右が正\n\
float32 joy_stick_r_y_upwards     # 右ジョイスティック上下方向 上が正\n\
\n\
float32 joy_stick_l_x_rightwards  # 左ジョイスティック左右方向 右が正\n\
float32 joy_stick_l_y_upwards     # 左ジョイスティック上下方向 上が正\n\
\n\
bool cross_key_right\n\
bool cross_key_left\n\
bool cross_key_up\n\
bool cross_key_down\n\
\n\
bool button_circle\n\
bool button_triangle\n\
bool button_cross\n\
bool button_square\n\
\n\
bool button_r1\n\
bool button_r2\n\
bool button_r3\n\
\n\
bool button_l1\n\
bool button_l2\n\
bool button_l3\n\
\n\
bool button_select\n\
bool button_start\n\
bool button_ps\n\
";
  }

  static const char* value(const ::joy_handler_hori::JoySelectedData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joy_stick_r_x_rightwards);
      stream.next(m.joy_stick_r_y_upwards);
      stream.next(m.joy_stick_l_x_rightwards);
      stream.next(m.joy_stick_l_y_upwards);
      stream.next(m.cross_key_right);
      stream.next(m.cross_key_left);
      stream.next(m.cross_key_up);
      stream.next(m.cross_key_down);
      stream.next(m.button_circle);
      stream.next(m.button_triangle);
      stream.next(m.button_cross);
      stream.next(m.button_square);
      stream.next(m.button_r1);
      stream.next(m.button_r2);
      stream.next(m.button_r3);
      stream.next(m.button_l1);
      stream.next(m.button_l2);
      stream.next(m.button_l3);
      stream.next(m.button_select);
      stream.next(m.button_start);
      stream.next(m.button_ps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoySelectedData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joy_handler_hori::JoySelectedData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joy_handler_hori::JoySelectedData_<ContainerAllocator>& v)
  {
    s << indent << "joy_stick_r_x_rightwards: ";
    Printer<float>::stream(s, indent + "  ", v.joy_stick_r_x_rightwards);
    s << indent << "joy_stick_r_y_upwards: ";
    Printer<float>::stream(s, indent + "  ", v.joy_stick_r_y_upwards);
    s << indent << "joy_stick_l_x_rightwards: ";
    Printer<float>::stream(s, indent + "  ", v.joy_stick_l_x_rightwards);
    s << indent << "joy_stick_l_y_upwards: ";
    Printer<float>::stream(s, indent + "  ", v.joy_stick_l_y_upwards);
    s << indent << "cross_key_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cross_key_right);
    s << indent << "cross_key_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cross_key_left);
    s << indent << "cross_key_up: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cross_key_up);
    s << indent << "cross_key_down: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cross_key_down);
    s << indent << "button_circle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_circle);
    s << indent << "button_triangle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_triangle);
    s << indent << "button_cross: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_cross);
    s << indent << "button_square: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_square);
    s << indent << "button_r1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_r1);
    s << indent << "button_r2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_r2);
    s << indent << "button_r3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_r3);
    s << indent << "button_l1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_l1);
    s << indent << "button_l2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_l2);
    s << indent << "button_l3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_l3);
    s << indent << "button_select: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_select);
    s << indent << "button_start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_start);
    s << indent << "button_ps: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_ps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOY_HANDLER_HORI_MESSAGE_JOYSELECTEDDATA_H
